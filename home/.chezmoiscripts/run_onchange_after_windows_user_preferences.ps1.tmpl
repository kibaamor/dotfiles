###################################################################################################
# Update PATH
function Add-PathToUserPath {
  param ([string]$NewPath)

  $envPath = [System.Environment]::GetEnvironmentVariable("PATH", "User")
  if ($envPath -split ";" -contains $NewPath) {
    Write-Host "$NewPath is already in PATH"
  } else {
    Write-Host "Adding $NewPath to PATH"
    [System.Environment]::SetEnvironmentVariable("PATH", "$NewPath;$envPath", "User")
  }
}
Add-PathToUserPath "$env:USERPROFILE\.local\bin"
Add-PathToUserPath "$env:USERPROFILE\go\bin"


###################################################################################################
# Update git config
if (Get-Command git -ErrorAction SilentlyContinue) {
  if ($env:GIT_USERNAME) {
    $currentUsername = git config --global user.name
    if ($currentUsername -ne $env:GIT_USERNAME) {
      Write-Host "Updating git global user.name from '$currentUsername' to '$env:GIT_USERNAME'"
      git config --global user.name "$env:GIT_USERNAME"
    }
  }

  if ($env:GIT_EMAIL) {
    $currentEmail = git config --global user.email
    if ($currentEmail -ne $env:GIT_EMAIL) {
      Write-Host "Updating git global user.email from '$currentEmail' to '$env:GIT_EMAIL'"
      git config --global user.email "$env:GIT_EMAIL"
    }
  }

  if ($env:default_proxy) {
    $currentHttpProxy = git config --global http.proxy
    if ($currentHttpProxy -ne "$env:default_proxy") {
        Write-Host "Updating git global http.proxy from '$currentHttpProxy' to '$env:default_proxy'"
        git config --global http.proxy "$env:default_proxy"
    }

    $currentHttpsProxy = git config --global https.proxy
    if ($currentHttpsProxy -ne "$env:default_proxy") {
        Write-Host "Updating git global https.proxy from '$currentHttpsProxy' to '$env:default_proxy'"
        git config --global https.proxy "$env:default_proxy"
    }
  }
}


###################################################################################################
# Install softwares via winget
$installedPackages = winget list
{{ range $package := .packages.windows }}
if (-not ($installedPackages | Select-String '{{ $package }}')) {
  Write-Host 'Install package {{ $package }}...'
  winget install --id '{{ $package }}' --accept-package-agreements --accept-source-agreements --force
} else {
  Write-Host 'Package {{ $package }} is already installed.'
}
{{ end }}


###################################################################################################
# Install softwares via scoop
function Install-Scoop {
  try {
    $url = "https://github.com/ScoopInstaller/Install/archive/refs/heads/master.tar.gz"

    $gz = New-Object IO.Compression.GzipStream (
        [IO.MemoryStream]::new((Invoke-WebRequest $url -UseBasicParsing).Content),
        [IO.Compression.CompressionMode]::Decompress
    )

    $tar = New-Object IO.MemoryStream
    $buf = New-Object byte[] 4096
    while (($n = $gz.Read($buf, 0, $buf.Length)) -gt 0) { $tar.Write($buf, 0, $n) }
    $gz.Close(); $tar.Position = 0

    while ($tar.Position -lt $tar.Length) {
        $h = New-Object byte[] 512; $tar.Read($h, 0, 512) > $null
        $name = ([Text.Encoding]::ASCII.GetString($h, 0, 100)).Trim("`0")
        if (-not $name) { break }
        $size = [Convert]::ToInt64(([Text.Encoding]::ASCII.GetString($h,124,12)).Trim("`0"), 8)
        if ($name -like '*install.ps1') {
            $b = New-Object byte[] $size; $tar.Read($b,0,$size) > $null
            iex ([Text.Encoding]::UTF8.GetString($b)); break
        } else {
            $tar.Seek(([math]::Ceiling($size/512)*512), 'Current') > $null
        }
    }
  }
  catch {
    Write-Host "An error occurred when installing scoop: $_"
  }
}

if (-not (Test-Path "$env:USERPROFILE\scoop")) {
  Write-Host "Install scoop..."
  Install-Scoop
} else {
  Write-Host "Scoop is already installed."
}

if (Test-Path "$env:USERPROFILE\scoop") {
  Write-Host "Install git..."
  scoop install git

  Write-Host "Add bucket nerd-fonts..."
  scoop bucket add nerd-fonts

  Write-Host "Install font CascadiaMono-NF-Propo..."
  scoop install CascadiaMono-NF-Propo
  Write-Host "Install font Source-Han-Sans-SC..."
  scoop install Source-Han-Sans-SC

  Write-Host "Add bucket extras..."
  scoop bucket add extras

  Write-Host "Install snipaste..."
  scoop install snipaste
}

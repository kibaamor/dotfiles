# execute self with normal user privileges
if (([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] 'Administrator')) {
  if ([int](Get-CimInstance -Class Win32_OperatingSystem | Select-Object -ExpandProperty BuildNumber) -ge 6000) {
    $CommandLine = "-NoExit -File `"" + $MyInvocation.MyCommand.Path + "`" " + $MyInvocation.UnboundArguments
    #$CommandLine = "-File `"" + $MyInvocation.MyCommand.Path + "`" " + $MyInvocation.UnboundArguments
    Start-Process -Wait -FilePath PowerShell.exe -ArgumentList $CommandLine
    Exit
  }
}

# Add %USERPROFILE%\.local\bin to the PATH.
$bin = "$env:USERPROFILE\.local\bin"
$path = [Environment]::GetEnvironmentVariable('PATH', 'User').Split(';')
if (!$path.Contains($bin)) {
  Write-Host "Adding $bin to PATH"
  $path = [String]::Join(';', $path + $bin)
  [Environment]::SetEnvironmentVariable('PATH', $path, 'User')
}

# Softwares
$installedPackages = winget list
{{ range $package := .packages.windows }}
if (-not ($installedPackages | Select-String '{{ $package }}')) {
  Write-Host 'Install package {{ $package }}...'
  winget install --id '{{ $package }}' --accept-package-agreements --accept-source-agreements --force
} else {
  Write-Host 'Package {{ $package }} is already installed.'
}
{{ end }}

# Modules
$installedModules = Get-Module -ListAvailable | Select-Object -ExpandProperty Name -Unique
{{ range $module := .powershell.modules }}
if (-not $installedModules.Contains('{{ $module }}')) {
  Write-Host 'Install powershell module {{ $module }}...'
  Install-Module -Name '{{ $module }}' -Force -AllowClobber -Scope CurrentUser
} else {
  Write-Host 'Powershell module {{ $module }} is already installed.'
}
{{ end }}

function Install-Scoop {
  try {
    $url = "https://github.com/ScoopInstaller/Install/archive/refs/heads/master.tar.gz"

    $gz = New-Object IO.Compression.GzipStream (
        [IO.MemoryStream]::new((Invoke-WebRequest $url -UseBasicParsing).Content),
        [IO.Compression.CompressionMode]::Decompress
    )

    $tar = New-Object IO.MemoryStream
    $buf = New-Object byte[] 4096
    while (($n = $gz.Read($buf, 0, $buf.Length)) -gt 0) { $tar.Write($buf, 0, $n) }
    $gz.Close(); $tar.Position = 0

    while ($tar.Position -lt $tar.Length) {
        $h = New-Object byte[] 512; $tar.Read($h, 0, 512) > $null
        $name = ([Text.Encoding]::ASCII.GetString($h, 0, 100)).Trim("`0")
        if (-not $name) { break }
        $size = [Convert]::ToInt64(([Text.Encoding]::ASCII.GetString($h,124,12)).Trim("`0"), 8)
        if ($name -like '*install.ps1') {
            $b = New-Object byte[] $size; $tar.Read($b,0,$size) > $null
            iex ([Text.Encoding]::UTF8.GetString($b)); break
        } else {
            $tar.Seek(([math]::Ceiling($size/512)*512), 'Current') > $null
        }
    }
  }
  catch {
    Write-Host "An error occurred when installing scoop: $_"
  }
}

if (-not (Test-Path "$env:USERPROFILE\scoop")) {
  Write-Host "Install scoop..."
  Install-Scoop
} else {
  Write-Host "Scoop is already installed."
}

if (Test-Path "$env:USERPROFILE\scoop") {
  Write-Host "Install git..."
  scoop install git
  Write-Host "Add nerd-fonts bucket..."
  scoop bucket add nerd-fonts
  Write-Host "Install font CascadiaMono-NF-Propo..."
  scoop install CascadiaMono-NF-Propo
  Write-Host "Install snipaste..."
  scoop install snipaste
}

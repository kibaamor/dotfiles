# Add %USERPROFILE%\.local\bin to the PATH.
$bin = "$env:USERPROFILE\.local\bin"
$path = [Environment]::GetEnvironmentVariable('PATH', 'User').Split(';')
if (!$path.Contains($bin)) {
  Write-Host "Adding $bin to PATH"
  $path = [String]::Join(';', $path + $bin)
  [Environment]::SetEnvironmentVariable('PATH', $path, 'User')
}

Get-Module -ListAvailable PackageManagement

Install-Module PowerShellGet -Force -Scope CurrentUser
Install-Module -Name PackageManagement -Force -Scope CurrentUser
Import-Module PackageManagement

Write-Host 'Install package provider NuGet...'
Install-PackageProvider -Name NuGet -Force -Scope CurrentUser | Out-Null

# Softwares
$installedPackages = winget list
{{ range $package := .packages.windows }}
if (-not ($installedPackages | Select-String '{{ $package }}')) {
  Write-Host 'Install package {{ $package }}...'
  winget install --id '{{ $package }}' --accept-package-agreements --accept-source-agreements --force --scope user
} else {
  Write-Host 'Package {{ $package }} is already installed.'
}
{{ end }}

Write-Host 'Trust package repository PSGallery...'
Set-PSRepository -Name PSGallery -InstallationPolicy Trusted

# Modules
$installedModules = Get-Module -ListAvailable | Select-Object -ExpandProperty Name -Unique
{{ range $module := .powershell.modules }}
if (-not $installedModules.Contains('{{ $module }}')) {
  Write-Host 'Install powershell module {{ $module }}...'
  Install-Module -Name '{{ $module }}' -Force -AllowClobber -Scope CurrentUser
} else {
  Write-Host 'Powershell module {{ $module }} is already installed.'
}
{{ end }}

function Install-Scoop {
  $zipUrl = "https://github.com/ScoopInstaller/Install/archive/refs/heads/master.zip"

  try {
    # Download ZIP and load in memory
    $zip = [System.IO.Compression.ZipArchive]::new(
        [System.IO.MemoryStream]::new((Invoke-WebRequest $zipUrl -UseBasicParsing).Content)
    )

    # Find install.ps1 in the archive
    $entry = $zip.Entries | Where-Object FullName -like "*install.ps1"

    if (-not $entry) {
        Write-Host "Fail to install scoop: install.ps1 not found in archive."
        return
    }

    # Read and execute install.ps1
    $ps1 = [System.IO.StreamReader]::new($entry.Open()).ReadToEnd()
    Invoke-Expression $ps1
  }
  catch {
    Write-Host "An error occurred when installing scoop: $_"
  }
}

if (Test-Path "$env:USERPROFILE\scoop") {
  Write-Host "Scoop is already installed."
} else {
  Write-Host "Install scoop..."
  Install-Scoop
}

Write-Host "Install git..."
scoop install git
Write-Host "Add nerd-fonts bucket..."
scoop bucket add nerd-fonts
Write-Host "Install font CascadiaMono-NF-Propo..."
scoop install CascadiaMono-NF-Propo

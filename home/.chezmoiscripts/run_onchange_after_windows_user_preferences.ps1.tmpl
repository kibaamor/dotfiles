# execute self with normal user privileges
if (([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] 'Administrator')) {
  if ([int](Get-CimInstance -Class Win32_OperatingSystem | Select-Object -ExpandProperty BuildNumber) -ge 6000) {
    $CommandLine = "-NoExit -File `"" + $MyInvocation.MyCommand.Path + "`" " + $MyInvocation.UnboundArguments
    #$CommandLine = "-File `"" + $MyInvocation.MyCommand.Path + "`" " + $MyInvocation.UnboundArguments
    Start-Process -Wait -FilePath PowerShell.exe -ArgumentList $CommandLine
    Exit
  }
}

# Add %USERPROFILE%\.local\bin to the PATH.
$bin = "$env:USERPROFILE\.local\bin"
$path = [Environment]::GetEnvironmentVariable('PATH', 'User').Split(';')
if (!$path.Contains($bin)) {
  Write-Host "Adding $bin to PATH"
  $path = [String]::Join(';', $path + $bin)
  [Environment]::SetEnvironmentVariable('PATH', $path, 'User')
}

# Softwares
$installedPackages = winget list
{{ range $package := .packages.windows }}
if (-not ($installedPackages | Select-String '{{ $package }}')) {
  Write-Host 'Install package {{ $package }}...'
  winget install --id '{{ $package }}' --accept-package-agreements --accept-source-agreements --force
} else {
  Write-Host 'Package {{ $package }} is already installed.'
}
{{ end }}

# Modules
$installedModules = Get-Module -ListAvailable | Select-Object -ExpandProperty Name -Unique
{{ range $module := .powershell.modules }}
if (-not $installedModules.Contains('{{ $module }}')) {
  Write-Host 'Install powershell module {{ $module }}...'
  Install-Module -Name '{{ $module }}' -Force -AllowClobber -Scope CurrentUser
} else {
  Write-Host 'Powershell module {{ $module }} is already installed.'
}
{{ end }}

function Install-Scoop {
  try {
    Add-Type -AssemblyName System.IO.Compression.FileSystem

    $zipUrl = "https://github.com/ScoopInstaller/Install/archive/refs/heads/master.zip"

    # Download ZIP and load in memory
    $zip = [System.IO.Compression.ZipArchive]::new(
        [System.IO.MemoryStream]::new((Invoke-WebRequest $zipUrl -UseBasicParsing).Content)
    )

    # Find install.ps1 in the archive
    $entry = $zip.Entries | Where-Object FullName -like "*install.ps1"

    if (-not $entry) {
        Write-Host "Fail to install scoop: install.ps1 not found in archive."
        return
    }

    # Read and execute install.ps1
    $ps1 = [System.IO.StreamReader]::new($entry.Open()).ReadToEnd()
    Invoke-Expression $ps1
  }
  catch {
    Write-Host "An error occurred when installing scoop: $_"
  }
}

if (-not (Test-Path "$env:USERPROFILE\scoop")) {
  Write-Host "Install scoop..."
  Install-Scoop
} else {
  Write-Host "Scoop is already installed."
}

if (Test-Path "$env:USERPROFILE\scoop") {
  Write-Host "Install git..."
  scoop install git
  Write-Host "Add nerd-fonts bucket..."
  scoop bucket add nerd-fonts
  Write-Host "Install font CascadiaMono-NF-Propo..."
  scoop install CascadiaMono-NF-Propo
  Write-Host "Install snipaste..."
  scoop install snipaste
}
